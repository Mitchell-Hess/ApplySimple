name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '22'
  PYTHON_VERSION: '3.12'

jobs:
  # Frontend Tests & Build
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Lint
        working-directory: ./frontend
        run: npm run lint

      - name: Build
        working-directory: ./frontend
        run: npm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/applysimple
          ML_SERVICE_URL: http://localhost:8000

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next

  # ML Service Tests
  ml-service:
    name: ML Service CI
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ml_service/requirements.txt

      - name: Install dependencies
        working-directory: ./ml_service
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Lint with flake8
        working-directory: ./ml_service
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test ML Service
        working-directory: ./ml_service
        run: |
          # Add tests here when available
          python -c "import main; print('ML Service imports successfully')"

  # Database Migration Check
  database:
    name: Database Migrations
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: applysimple
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install root dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/applysimple

      - name: Run Migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/applysimple

  # Docker Build
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [frontend, ml-service]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: applysimple-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build ML Service Image
        uses: docker/build-push-action@v5
        with:
          context: ./ml_service
          file: ./ml_service/Dockerfile
          push: false
          tags: applysimple-ml:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Production (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend, ml-service, database, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy Frontend to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'

      # Add Railway deployment or your preferred platform
      - name: Deploy ML Service
        run: |
          echo "Deploy ML service to Railway, Render, or your platform"
          # Add your deployment commands here
